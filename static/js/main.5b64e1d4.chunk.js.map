{"version":3,"sources":["component/Message.js","component/Input.js","container/Calculator.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","celsius","escalaNames","c","f","TemperaturaInput","htmlFor","escala","id","placeholder","concat","onChange","e","console","log","target","value","onTemperaturaChange","temperatura","toCelsius","fahrenheit","toFahrenheit","tryConvert","convert","input","parseFloat","Number","isNaN","ouput","Math","round","toString","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCelsiusChange","newTemperaura","setState","handleFarenheitChange","state","xxx","yyy","component_Message","Input","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","container_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAIeA,EAFC,SAACC,GAAD,OAAWC,EAAAC,EAAAC,cAAA,sBAAcH,EAAMI,SAAW,IAAM,KAAO,KAA5C,iBCArBC,EAAc,CACnBC,EAAG,UACHC,EAAG,cAwBWC,EApBU,SAACR,GAMzB,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAOM,QAAWT,EAAMU,QAAxB,qBAAoDL,EAAYL,EAAMU,SACtET,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACCQ,GAAMX,EAAMU,OACZE,YAAW,UAAAC,OAAcR,EAAYL,EAAMU,SAC3CI,SAZkB,SAACC,GACrBC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBnB,EAAMoB,oBAAoBL,EAAEG,OAAOC,QAWjCA,MAASnB,EAAMqB,gBCjBbC,EAAY,SAACC,GAAD,OAAoC,GAAnBA,EAAa,IAAU,GACpDC,EAAe,SAACpB,GAAD,OAAwB,EAAVA,EAAc,EAAK,IAGhDqB,EAAa,SAACJ,EAAaK,GAChC,IAAMC,EAAQC,WAAWP,GACzB,GAAGQ,OAAOC,MAAMH,GACf,MAAO,GAER,IAAMI,EAAQL,EAAQC,GAEtB,OADgBK,KAAKC,MAAc,IAARF,GAAgB,KAC5BG,YAmDDC,cA9Cd,SAAAA,EAAYnC,GAAM,IAAAoC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvC,KAOP2C,oBAAsB,SAACC,GACtBR,EAAKS,SAAS,CACbxB,YAAcuB,EACdlC,OAAS,OAXO0B,EAelBU,sBAAwB,SAACF,GACxBR,EAAKS,SAAS,CACbxB,YAAcuB,EACdlC,OAAS,OAhBV0B,EAAKW,MAAQ,CACZ1B,YAAa,GACbX,OAAQ,IAJQ0B,wEAuBjB,IAAMY,EAA6B,MAAtBT,KAAKQ,MAAMrC,OAAiBe,EAAWc,KAAKQ,MAAM1B,YAAYC,GAAaiB,KAAKQ,MAAM1B,YAC7F4B,EAA4B,MAAtBV,KAAKQ,MAAMrC,OAAiBe,EAAWc,KAAKQ,MAAM1B,YAAaG,GAAgBe,KAAKQ,MAAM1B,YAEtG,OACCpB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAC+C,EAAD,CAAS9C,QAAWmC,KAAKQ,MAAM1B,cAC/BpB,EAAAC,EAAAC,cAACgD,EAAD,CACCzC,OAAS,IACTW,YAAe2B,EACf5B,oBAAuBmB,KAAKI,sBAE7B1C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgD,EAAD,CACCzC,OAAS,IACTW,YAAe4B,EACf7B,oBAAuBmB,KAAKO,gCAxCRM,IAAMC,WCVXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAAgBC,SAASC,eAAe,SDkHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b64e1d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Message = (props) => <h2> El agua {props.celsius >= 100 ? 'si' : 'no'} hervirá </h2> \r\n\r\nexport default Message","import React from 'react';\r\n\r\nconst escalaNames = {\r\n c: 'Celsius',\r\n f: 'Fahrenheit'\r\n};\r\n\r\n\r\nconst TemperaturaInput = (props) => {\r\n const handleChange = (e) => {\r\n  console.log(e.target.value)\r\n  props.onTemperaturaChange(e.target.value)\r\n }\r\n\r\n return (\r\n  <div>\r\n   <label htmlFor = {props.escala} >Coloca los grados {escalaNames[props.escala]}</label>\r\n   <br/>\r\n   <input \r\n    id = {props.escala}\r\n    placeholder = {`grados ${escalaNames[props.escala]}`}\r\n    onChange = {handleChange}\r\n    value = {props.temperatura}\r\n   />\r\n  </div>\r\n )\r\n}\r\n\r\nexport default TemperaturaInput;","import React from 'react';\r\nimport Message  from '../component/Message';\r\nimport TemperaturaInput from '../component/Input';\r\n\r\n/* Funciones para la cnversión de temperatura */\r\nconst toCelsius = (fahrenheit) => (fahrenheit - 32) * 5 / 9; //valor en celsius\r\nconst toFahrenheit = (celsius) => (celsius * 9 / 5) + 32; // valor en farenheit\r\n\r\n\r\nconst tryConvert = (temperatura, convert) => {\r\n const input = parseFloat(temperatura); //me aseguro que sea un numero\r\n if(Number.isNaN(input)){\r\n  return '';\r\n }\r\n const ouput = convert(input);\r\n const rounded = Math.round(ouput * 1000) / 1000;\r\n return rounded.toString();\r\n}\r\n\r\n\r\nclass Calculator extends React.Component {\r\n constructor(props){\r\n  super(props);\r\n  this.state = {\r\n   temperatura :'',\r\n   escala :''\r\n  }\r\n }\r\n\r\n handleCelsiusChange = (newTemperaura) => {\r\n  this.setState({\r\n   temperatura : newTemperaura,\r\n   escala : 'c'\r\n  })\r\n }\r\n\r\n handleFarenheitChange = (newTemperaura) => {\r\n  this.setState({\r\n   temperatura : newTemperaura,\r\n   escala : 'f'\r\n  })\r\n }\r\n\r\n render(){\r\n  const xxx =  this.state.escala === 'f' ? tryConvert(this.state.temperatura,toCelsius) : this.state.temperatura;\r\n  const yyy = this.state.escala === 'c' ? tryConvert(this.state.temperatura, toFahrenheit) : this.state.temperatura;\r\n\r\n  return (\r\n   <div>\r\n    <h1>Mi calculadora centígrada</h1>\r\n    <Message celsius = {this.state.temperatura}/>\r\n    <TemperaturaInput \r\n     escala = \"c\"\r\n     temperatura = {xxx}\r\n     onTemperaturaChange = {this.handleCelsiusChange}\r\n     />\r\n    <hr/>\r\n    <TemperaturaInput \r\n     escala = \"f\"\r\n     temperatura = {yyy}\r\n     onTemperaturaChange = {this.handleFarenheitChange}\r\n    />\r\n   </div>\r\n  )\r\n }\r\n}\r\n\r\nexport default Calculator","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calculator from './container/Calculator';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Calculator />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}